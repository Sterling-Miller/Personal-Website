---
export interface Props {
	title: string;
}

const { title } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="layout">
			<div class="left-column">
				<slot name="left" />
			</div>

			<div class="right-column">
				<slot name="right" />
			</div>
		</div>

		<div class="theme-switcher">
			<button id="theme-toggle">Toggle</button>
		</div>
		<script>
            const themeToggle = document.getElementById('theme-toggle');
            const rootElement = document.documentElement;

			if (themeToggle) {
				themeToggle.addEventListener('click', () => {
					const currentTheme = rootElement.classList.contains('dark') ? 'dark' : 'light';
					const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
					rootElement.classList.remove(currentTheme);
					rootElement.classList.add(newTheme);
					localStorage.setItem('theme', newTheme);
				});
			}

            const savedTheme = localStorage.getItem('theme') || 'light';
            rootElement.classList.add(savedTheme);
        </script>
	</body>
</html>

<style>
	:root {
        --color-text-light: hsl(0, 0%, 10%);
        --color-bg-light: hsl(0, 0%, 100%);
        --color-text-dark: hsl(0, 0%, 100%);
        --color-bg-dark: hsl(0, 0%, 5%);
    }

	html.light {
        --color-text: var(--color-text-light);
        --color-bg: var(--color-bg-light);
    }

	html.dark {
        --color-text: var(--color-text-dark);
        --color-bg: var(--color-bg-dark);
    }

	body {
		font-family: system-ui, sans-serif;
		font-size: var(--font-size-base);
		color: var(--color-text);
		background-color: var(--color-bg);
		margin: 0;
		height: 100%;
	}
	
	.theme-switcher {
        position: fixed;
        top: 1rem;
        right: 1rem;
    }

	#theme-toggle {
        padding: 0.5rem 1rem;
        font-size: 1rem;
        cursor: pointer;
        background: var(--color-bg);
        color: var(--color-text);
        border: 1px solid var(--color-text);
        border-radius: 4px;
    }

	.layout {
		display: flex;
		flex-direction: row;
		height: 100vh;
	}

	.left-column {
		flex: 1;
		margin-top: 5rem;
		margin-left: 10rem;
		overflow-y: auto;
	}

	.right-column {
		flex: 4;
		height: 100%;
		overflow-y: auto;
		background-color: var(--color-bg);
	}

	@media (max-width: 768px) {
		.layout {
			flex-direction: column;
		}

		.left-column, .right-column {
			position: static;
			width: 100%;
			height: auto;
		}

		.right-column {
			margin-left: 0;
		}
	}

	h1 {
		font-size: var(--font-size-xl);
	}

	h2 {
		font-size: var(--font-size-lg);
	}

	code {
		font-family: Menlo, Monaco, Consolas, monospace;
	}
</style>
